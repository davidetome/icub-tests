/**
@page writing-and-running Writing and Running Tests

@tableofcontents

\section writing-new-tests Writing a new test

* Create a folder with the name of your test case in the `icub-tests/src/` folder to keep your test codes:

~~~
    $ mkdir icub-tests/src/example-test
~~~

* Create a child test class inherited from the `YarpTestCase`:

\include cpp/ExampleTest/ExampleTest.h

* Implement the test case:

\include cpp/ExampleTest/ExampleTest.cpp


Notice: The `ROBOTTESTINGFRAMEWORK_TEST_CHECK`, `ROBOTTESTINGFRAMEWORK_TEST_REPORT` do NOT threw any exception and are used to add failure or report messages to the result collector. Instead, all the macros which include `_ASSERT_` within their names (e.g., `ROBOTTESTINGFRAMEWORK_ASSERT_FAIL`) throw exceptions which prevent only the current test case (Not the whole test suite) of being proceed. The error/failure messages thrown by the exceptions are caught. (See [*Basic Assertion macros*](http://robotology.github.io/robot-testing-framework/documentation/TestAssert_8h.html)).

The report/assertion macros store the source line number where the check/report or assertion happen. To see them, you can run the test case or suite with `--detail` parameter using the `robottestingframework-testrunner` (See [*Running test case plug-ins using robottestingframework-testrunner*](http://robotology.github.io/robot-testing-framework/documentation/robottestingframework-testrunner.html)).

* Create a cmake file to build the plug-in:

\include cpp/ExampleTest/CMakeLists.txt

* Call your cmake file from the `icub-test/CMakeLists.txt` to build it along with the other other test plugins.
To do that, adds the following line to the `icub-test/CMakeLists.txt`

~~~
    # Build example test
    add_subdirectory(src/example-test)
~~~

Please check the `icub-tests/example` folder for a template for developing tests for the iCub.

\section running_single_test_case Running a single test case

As it is documented here ([*Running test case plug-ins using robottestingframework-testrunner*](http://robotology.github.io/robot-testing-framework/documentation/robottestingframework-testrunner.html))
you can run a single test case or run it with the other tests using a test suite.  For example, to run a single test case:

~~~
    robottestingframework-testrunner --verbose --test plugins/ExampleTest.so  --param "--name MyExampleTest"
~~~

Notice that this test require the `yarpserver` to be running and it contains tests that are programmed to succeed and some that are programmed to fail.

or to run the iCubSim camera test whith the test configuration file:

~~~
    robottestingframework-testrunner --verbose --test plugins/CameraTest.so --param "--from camera_right.ini" --environment "--robotname icubSim"
~~~

This runs the icubSim right-camera test with the parameters specified in the `right_camera.ini` which can be found in `icub-tests/suites/contexts/icubSim` folder. This test assumes you are running `yarpserver` and the iCub simulator (i.e. `iCub_SIM`).

Notice that the environment parameter `--robotname icubSim` is used to locate the correct context (for this examples is `icubSim`) and also to update the variables loaded from the `right_camera.ini` file.


\section running_multiple_tests Running multiple tests using a test suite

You can update one of the existing suite XML files to add your test case plug-in and its parameters or create a new test suite which keeps all the relevant test cases.
For example the `basic-icubSim.xml` test suite keeps the basic tests for cameras and motors:

~~~
<?xml version="1.0" encoding="UTF-8"?>

<suite name="Basic Tests Suite">
    <description>Testing robot's basic features</description>
    <environment>--robotname icubSim</environment>
    <fixture param="--fixture icubsim-fixture.xml"> yarpmanager </fixture>

    <!-- Camera -->
    <test type="dll" param="--from right_camera.ini"> CameraTest </test>
    <test type="dll" param="--from left_camera.ini"> CameraTest </test>

    <!-- Motors -->
    <test type="dll" param="--from test_right_arm.ini"> MotorTest </test>
    <test type="dll" param="--from test_left_arm.ini"> MotorTest </test>
</suite>
~~~

Then you can run all the test cases from the test suite:

~~~
    robottestingframework-testrunner --verbose --suite icub-tests/suites/basics-icubSim.xml
~~~

The `robottestingframework-testrunner`, first, launches the iCub simulator and then runs all the tests one after each other. After running all the test cases, the `tesrunner` stop the simulator. If the
iCub simulator crashes during the test run, the `robottestingframework-testrunner` re-launchs it and continues running the remaining tests.

How `robottestingframework-testrunner` knows that it should launch the iCub simulator before running the tests? Well, this is indicated by `<fixture param="--fixture icubsim-fixture.xml"> yarpmanager </fixture>`.
The `robottestingframework-testrunner` uses the `yarpmanager` fixture plug-in to launch the modules which are listed in the `icubsim-fixture.xml`.  Notice that all the fixture files should be located in the `icub-tests/suites/fixtures` folder.

*/
