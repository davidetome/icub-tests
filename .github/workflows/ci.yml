name: Continuous Integration

on:
  push:
    branches:
    - 'master'
    - 'feat/**'
    - 'fix/**'
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC 
  - cron:  '0 2 * * *'
    
jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [windows-latest, ubuntu-latest, macOS-latest]

    steps:
    - uses: actions/checkout@master
        
    - name: Set up environment variables [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # the following fix the problem described in https://github.community/t5/GitHub-Actions/Windows-tests-worked-yesterday-broken-today/m-p/43839#M5530
        echo "::add-path::C:\Program Files\Git\bin"
        echo "::set-env name=VCPKG_ROBOTOLOGY_ROOT::D:/vcpkg-robotology"
        echo "::set-env name=VCPKG_ROBOTOLOGY_BIN_PORTS_ROOT::D:/vcpkg-robotology-binary-ports"
        
    - name: Display environment variables
      shell: bash
      run: env
        
    # ============
    # DEPENDENCIES
    # ============
    - name: Dependencies [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # To avoid spending a huge time compiling vcpkg dependencies, we download a root that comes precompiled with all the ports that we need
        choco install -y wget unzip
        # To avoid problems with non-relocatable packages, we unzip the archive exactly in the same C:/vcpkg-robotology
        # that has been used to create the pre-compiled archive
        cd D:/
        wget https://github.com/robotology-playground/robotology-superbuild-dependencies/releases/download/v0.0.2/vcpkg-robotology.zip
        unzip vcpkg-robotology.zip

    - name: Dependencies [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install git build-essential pkg-config zip unzip zlib1g-dev cmake libace-dev coinor-libipopt-dev libeigen3-dev \
                         qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev libtinyxml-dev libgsl-dev wget curl autoconf \
                         autogen automake libtool mlocate libopencv-dev liblua5.1-dev

    - name: Dependencies [macOS]
      if: matrix.os == 'macOS-latest'
      run: |
        brew update
        brew upgrade
        brew install ace cmake eigen gsl ipopt opencv pkg-config qt5 lua
    - name: Source-based Dependencies [Windows] 
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # ycm
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/ycm.git --depth 1 --branch master
        cd ycm && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROBOTOLOGY_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
        # robot-testing-framework
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/robot-testing-framework.git --depth 1 --branch devel
        cd robot-testing-framework && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROBOTOLOGY_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                     -DENABLE_WEB_LISTENER:BOOL=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
        # yarp
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp.git --depth 1 --branch master
        cd yarp && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROBOTOLOGY_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCREATE_LIB_MATH:BOOL=ON -DCREATE_SHARED_LIBRARY:BOOL=ON \
                     -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} -DYARP_COMPILE_RobotTestingFramework_ADDONS:BOOL=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL
        # icub-main
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/icub-main.git --depth 1 --branch devel
        cd icub-main && mkdir -p build && cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROBOTOLOGY_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_icubmod_cartesiancontrollerserver=ON -DENABLE_icubmod_cartesiancontrollerclient=ON \
                     -DENABLE_icubmod_gazecontrollerclient=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target INSTALL 
        
    - name: Source-based Dependencies [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        # ycm
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/ycm.git --depth 1 --branch master
        cd ycm && mkdir -p build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # robot-testing-framework
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/robot-testing-framework.git --depth 1 --branch devel
        cd robot-testing-framework && mkdir -p build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DENABLE_LUA_PLUGIN:BOOL=ON -DENABLE_WEB_LISTENER:BOOL=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # yarp
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp.git --depth 1 --branch master
        cd yarp && mkdir -p build && cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DYARP_COMPILE_RobotTestingFramework_ADDONS:BOOL=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
        # icub-main
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/icub-main.git --depth 1 --branch devel
        cd icub-main && mkdir -p build && cd build
        cmake  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
               -DENABLE_icubmod_cartesiancontrollerserver=ON -DENABLE_icubmod_cartesiancontrollerclient=ON -DENABLE_icubmod_gazecontrollerclient=ON ..
        cmake --build . --config ${{ matrix.build_type }} --target install 
      env:
        # This is necessary only on macOS/homebrew, but on Linux it should be ignored
        Qt5_DIR: /usr/local/opt/qt5/lib/cmake/Qt5
    # ===================
    # CMAKE-BASED PROJECT
    # ===================
    - name: Configure [Windows]
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build
        cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROBOTOLOGY_ROOT}/scripts/buildsystems/vcpkg.cmake \
                     -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install \
                     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Configure [Ubuntu/macOS]
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
      shell: bash
      run: |
        mkdir -p build
        cd build    
        cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
      env:
        # This is necessary only on macOS/homebrew, but on Linux it should be ignored
        Qt5_DIR: /usr/local/opt/qt5/lib/cmake/Qt5
      
    - name: Build
      shell: bash
      run: |
        cd build
        # Fix for using YARP idl generators (that link ACE) in Windows 
        # See https://github.com/robotology/idyntree/issues/569 for more details
        export PATH=$PATH:${GITHUB_WORKSPACE}/install/bin:${VCPKG_ROBOTOLOGY_ROOT}/installed/x64-windows/bin
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Install
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }} --target install
